/*//(Flattening a Linked List_Coding Ninja)-> https://tinyurl.com/2p9ns48e    


Node* merge2Lists(Node* L1, Node* L2) {
	Node* dummyNode = new Node(-1);
	Node* res = dummyNode;
	while(L1 != NULL && L2 != NULL) {
		if (L1->data < L2->data) {
			res->child = L1;
			res = L1;
			L1 = L1->child;
		}
		else {
			res->child = L2;
			res = L2;
			L2 = L2->child;
		}

		if(L1){
			res->child = L1;
		} 
		else{
			res->child = L2;
		}

		res->next = NULL;
	}
	return dummyNode->child;
}


Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if (head == NULL || head->next == NULL) return head;

	Node* mergeHead = flattenLinkedList(head->next);
	return merge2Lists(head, mergeHead);
}


*/



/* Problem Statement: 
 Given a linked list containing ‘N’ head nodes where every node in the linked list contains two pointers:

  # ‘Next’ points to the next node in the list
  # ‘Child’ pointer to a linked list where the current node is the head.

 Each of these child linked lists is in sorted order and connected by a 'child' pointer. Your task is to flatten this linked list such that all nodes appear in a single layer or level in a 'sorted order'. 


*/



#include<bits/stdc++.h>
using namespace std;


class Node {
public:
    int data;
    Node *next;
    Node *child;

    // Constructors to initialize the
    // data, next, and child pointers
    Node() : data(0), next(nullptr), child(nullptr) {};
    Node(int x) : data(x), next(nullptr), child(nullptr) {}
    Node(int x, Node *nextNode, Node *childNode) : data(x), next(nextNode), child(childNode) {}
};




/* Soln 1: Brute Force
   Intuition:-
 To transform the given linked list into a single level sorted list ensuring that the nodes are arranged in an ascending order, we initialise an array to temporarily hold the extracted nodes during the traversal.
 We iterate over the array by first going over the top-level next pointers of the linked list then accessing each node within its child pointers adding all to the array. Then the array is sorted to arrange all values sequentially and a new linked list from that array is created and returned. 


   Algorithm:-
 # Step 1:Initialise an empty array to store the data extracted during the traversal.
 # Step 2: Start traversing through the top-level ‘next’ pointers of the linked list and for each node accessed by the ‘next’ pointer, traverse its ‘child’ nodes.
    Iterate all the nodes until reaching the end of the child pointer list appending each node’s value to the array. Move to the next primary node and repeat the process of traversing the child nodes.
 # Step 3: Sort the array to arrange its collected node data in ascending order.
 # Step 4: Create a new linked list from the sorted array and return the flattened linked list.


   Complexity Analysis:-
  # Time Complexity: O(N*M) + O(N*M log(N*M)) + O(N*M)where N is the length of the linked list along the next pointer and M is the length of the linked list along the child pointer.
    O(N*M) as we traverse through all the elements, iterating through ‘N’ nodes along the next pointer and ‘M’ nodes along the child pointer.
    O(N*M log(N*M)) as we sort the array containing N*M (total) elements.
    O(N*M) as we reconstruct the linked list from the sorted array by iterating over the N*M elements of the array.

  # Space Complexity : O(N*M) + O(N*M)where N is the length of the linked list along the next pointer and M is the length of the linked list along the child pointer.
    O(N*M) for storing all the elements in an additional array for sorting.
    O(N*M) to reconstruct the linked list from the array after sorting
*/
// Function to Convert Array To Vertical LL:
Node* convertArrToVerticalLL(vector<int> &arr) {
    if (arr.size() == 0) return NULL;

    Node* head = new Node(arr[0]);
    Node* temp = head;
    // Iterate through the vector & create nodes with vector elements
    for (int i=1; i < arr.size(); i++) {
    // Create a new node with the vector element
        Node* newNode = new Node(arr[i]);
        temp->child = newNode;
        temp = temp->child;
    }
    return head;
}

Node* flattenLL1(Node* head) {
    vector<int> arr;

    while(head != NULL) {
        Node* t2 = head;
        while(t2 != NULL) {
            arr.push_back(t2->data);
            t2 = t2->child;
        }
        head = head->next;
    }

    sort(arr.begin(), arr.end());

    return convertArrToVerticalLL(arr);
}





/* Soln 2: Optimal
   Intuition:-
 The time and space complexity of the previous approach can be optimised as we have not yet leveraged the given property that the child linked lists are sorted. We can eliminate the additional space and time complexity generated by sorting by using these sorted vertical linked lists.
 Instead of collecting all node values into an array and then sorting them, we can merge these pre-sorted lists directly during the traversal, eliminating the need for additional sorting steps. This merge operation can be performed efficiently in place without allocating extra space for the combined linked list.
 Read more about Merging Sorted Linked Lists. The base case ensures the termination of the recursion when there's either no list or only a single node remaining. The recursive function then handles the merging of the remaining lists after recursive flattening, creating a sorted flattened linked list.


   Algorithm:-

 # Base Case:
    If the head is null, indicating the end of the list, it is already flattened or there are no further nodes. Return the head as it is.
    Similarly, if there's no next node, meaning there's only one node left in the list, return the head as it is since it's already flattened.

 # Recursive Function: The core of the algorithm lies in implementing a recursive function responsible for flattening the linked list. The function operates based on the principle that:

    If the base conditions are not met, the function invokes itself recursively. This recursion continues until it reaches the base case, gradually flattening the linked list and merging the resultant with the previous node.

 # Return:Following the recursion, the function returns the merged head of the new flattened linked list. This head marks the new head of the merged list starting from the end, which will now be merged with the present head.


  # Step 1: Establish Base Case Conditions Check if the base case conditions are met, return the head if it is null or has no next pointer to head as there’s no further flattening or merging required.

  # Step 2: Recursively Merge the List:
    Initiate the recursive flattening process by calling `flattenLinkedList` on the next node (`head -> next`).
    The result of this recursive call is the head of the flattened and merged linked list.

  # Step 3: Merge Operations:
    Inside the recursive call, call the merge function which takes care of the merging of these two lists based on their data values.
    Read more about merging two linked lists here.
    The merged list is updated in the head, which is then returned as the result of the flattening process.


   Complexity Analysis:-
  # Time Complexity: O( N*(2M) ) ~ O(2 N*M)where N is the length of the linked list along the next pointer and M is the length of the linked list along the child pointers:
    The merge operation in each recursive call takes time complexity proportional to the length of the linked lists being merged as they have to iterate over the entire lists. Since the vertical depth of the linked lists is assume to be M, the time complexity for a single merge operation is proportional to O(2*M).
    This operation operation is performed N number of times (to each and every node along the next pointer list) hence the resultant time complexity becomes: O(N* 2M).

  # Space Complexity : O(1) as this algorithm uses no external space or additional data structures to store values. But a recursive stack uses O(N) space to build the recursive calls for each node along the next pointer list.
*/
Node* merge2Lists(Node* L1, Node* L2) {
    Node* dummyNode = new Node (-1);
    Node* res = dummyNode;

    while(L1 != NULL && L2 != NULL) {
        if (L1->data < L2->data) {
            res->child = L1;
            res = L1;
            L1 = L1->child;
        }
        else {
            res->child = L2;
            res = L2;
            L2 = L2->child;
        }

        if (L1 != NULL) {
            res->child = L1;
        }
        else {
            res->child = L2;
        }

        res->next = NULL;
    }
    return dummyNode->child;
}

Node* flattenLinkedList(Node* head) {
    if (head == NULL || head->next == NULL) return head;

    Node* mergeHead = flattenLinkedList(head->next);
    return merge2Lists(head, mergeHead);
}






// Print the LL by traversing through child pointers
void printLinkedList(Node* head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->child;
    }
    cout << endl;
}

// Print the linked list in a grid-like structure
void printOriginalLinkedList(Node* head, int depth) {
    while (head != nullptr) {
        cout << head->data;

        // If child exists, recursively
        // print it with indentation
        if (head->child) {
            cout << " -> ";
            printOriginalLinkedList(head->child, depth + 1);
        }

        // Add vertical bars
        // for each level in the grid
        if (head->next) {
            cout << endl;
            for (int i = 0; i < depth; ++i) {
                cout << "| ";
            }
        }
        head = head->next;
    }
}




int main() {

// Create a linked list with child pointers
    Node* head = new Node(5);
    head->child = new Node(9);
    
    head->next = new Node(10);
    head->next->child = new Node(4);
    
    head->next->next = new Node(12);
    head->next->next->child = new Node(20);
    head->next->next->child->child = new Node(13);
    
    head->next->next->next = new Node(7);
    head->next->next->next->child = new Node(17);



// Soln 1: Brute Force
// Print the original linked list structure
    cout << "Original linked list:" << endl;
    printOriginalLinkedList(head, 0);

    // Flatten the linked list
    // and print the flattened list
    Node* flattened1 = flattenLL1(head);
    cout << "\nFlattened linked list: ";
    printLinkedList(flattened1);




// Soln 2: OPtimal
    // Print the original LL structure
    cout << "Original linked list:" << endl;
    printOriginalLinkedList(head, 0);

    // Flatten the LL & print the flattened list
    Node* flattened = flattenLinkedList(head);
    cout << "\nFlattened linked list: ";
    printLinkedList(flattened);




    return 0;
}

